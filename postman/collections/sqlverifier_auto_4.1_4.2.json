{
	"info": {
		"_postman_id": "bc5356e4-29bb-435e-80e7-c2c3f6fd0c4a",
		"name": "sqlverifier_auto_4.1_4.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-bc5356e4-29bb-435e-80e7-c2c3f6fd0c4a"
	},
	"item": [
		{
			"name": "Register/login",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bceb7336-a7fd-4759-87da-303212b79fe3",
										"exec": [
											"let jsonBody = JSON.parse(pm.request.body)\r",
											"\r",
											"pm.environment.set(\"newUsername\", jsonBody.login);\r",
											"pm.environment.set(\"newPassword\", jsonBody.password);\r",
											"pm.environment.set(\"newEmail\", jsonBody.email);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "865d699e-b34c-409f-b4de-fba52d406e91",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "03af506c-4574-4fe5-a06a-60012397b960",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"adminToken\", jsonBody.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "93bcaf90-7f09-4e4e-a290-5e8f813f908a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{adminUsername}}\",\r\n  \"password\": \"{{adminPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's account info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73644a3d-45e8-44cf-9c37-1fc4c41fb5b7",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"user_id\", jsonBody.id);\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(false);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dfc7b20-dfef-495e-8535-e84f1b53a324",
										"exec": [
											"let originalUsername = pm.environment.get(\"newUsername\")\r",
											"let originalEmail= pm.environment.get(\"newEmail\")\r",
											"\r",
											"\r",
											"let usernameLowerCase = originalUsername.toLowerCase()\r",
											"let emailLowerCase = originalEmail.toLowerCase()\r",
											"\r",
											"\r",
											"pm.environment.set(\"usernameLowerCase\", usernameLowerCase)\r",
											"pm.environment.set(\"emailLowerCase\", emailLowerCase)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c5cda09f-8e0d-4566-896d-77621cc062bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"login\": \"{{usernameLowerCase}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6127625-519c-4bbe-b3cf-c7462a850c18",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b91134b9-3e70-4d27-af8e-42cc8b138068",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{user_id}},\r\n    \"login\": \"{{newUsername}}\",\r\n    \"activated\": true,\r\n    \"authorities\": [\r\n        \"ROLE_USER_STUDENT\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a402579c-a5a0-4d0c-8e55-4c9fbf4db5cc",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"userToken\", jsonBody.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5b6a0f5-1f5d-403e-9447-4ce8a92a16c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get logged in new user's account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4300044a-2ef6-48b8-8939-7c36607a7a07",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bccafa97-9362-4e6f-a28e-4300a8a72db2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9426efec-eb8c-44fa-85aa-f452eacd663c",
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "26331cfa-c5b1-4a4c-944b-b35910f58270",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NTA3ODE3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzQyMTQxN30.UZ8J5F-FaIHRyA-73M2IEg4xcy2xRVSlrZsdLRwHL__MroZAb0-6BFwt0lts90yojh7A6XxNsuxpLYC8XF-pMw"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's account info  after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bae2f63c-020e-427f-ae5f-6e80f27d8dc1",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7fd2bff0-da4a-4052-a932-d2a3442332b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"login\": \"{{newUsername}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.unset('newPassword')\r",
											"pm.environment.unset('newUsername')\r",
											"pm.environment.unset('adminToken')\r",
											"pm.environment.unset('userToken')\r",
											"pm.environment.unset('user_id')\r",
											"pm.environment.unset('usernameLowerCase')\r",
											"pm.environment.unset('newEmail')\r",
											"pm.environment.unset('emailLowerCase')\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "01c3a33c-3dec-4063-bb27-8e0e24f12d75",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"id": "15bb9251-4370-4733-a6c2-8438835bb69c"
				},
				{
					"name": "Sad path",
					"item": [
						{
							"name": "Register new user - empty username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bceb7336-a7fd-4759-87da-303212b79fe3",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7a647017-eeab-42a4-be43-f664bea43d02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register new user - empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bceb7336-a7fd-4759-87da-303212b79fe3",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9a0eb118-270f-4d58-8ba5-bc17ae14298c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register new user - empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bceb7336-a7fd-4759-87da-303212b79fe3",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9a5bd07-32c9-4b5c-be7a-53f865e57c45",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate with invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d3c0bfba-bc3f-434a-a211-da3f967b8d76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{invalidUsername}}\",\r\n  \"password\": \"{{invalidPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - no password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9d60c8ff-b475-4aeb-b6f7-8733b4b4c2c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate  - no username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad0628-814b-4c61-9c8b-7056fadf03ad",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b4b9ddb0-d1c5-4aa2-b2e0-37a1eff7fd01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin's account  - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73644a3d-45e8-44cf-9c37-1fc4c41fb5b7",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dfc7b20-dfef-495e-8535-e84f1b53a324",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7452a027-03bf-4a3d-a6d4-22ec41b10e9e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{adminUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUsername}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin's account  - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73644a3d-45e8-44cf-9c37-1fc4c41fb5b7",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dfc7b20-dfef-495e-8535-e84f1b53a324",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c17c5aad-d2a5-4202-b2b0-86022178d92d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{adminUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUsername}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "587cf377-ffa0-4b18-af60-b2bdfb6cb9cf"
				}
			],
			"id": "c90ecfa1-f687-4acd-9da8-2f22c0310435"
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Login as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e75d6cad-ecf8-409a-97da-5a926b9d3523",
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"adminToken\", response.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    \r",
											"    pm.expect(response.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "961251f0-8dd0-4272-a321-7a95995575e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Authorization",
										"value": "{{adminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{adminUsername}}\",\r\n    \"password\": \"{{adminPassword}}\",\r\n    \"rememberMe\": false\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"let response = pm.response.json()\r",
											"pm.collectionVariables.set(\"taskId\", response.id);\r",
											"pm.collectionVariables.set(\"taskText\", response.text);\r",
											"pm.collectionVariables.set(\"taskAnswer\", response.answer);\r",
											"pm.collectionVariables.set(\"taskTitle\", response.title);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Task id provided\", function () {\r",
											"   pm.expect(response.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Task text, answer, title are correct\", function () {\r",
											"    pm.expect(response.text).to.eql(pm.collectionVariables.get(\"taskText\"));\r",
											"    pm.expect(response.answer).to.eql(pm.collectionVariables.get(\"taskAnswer\"));\r",
											"    pm.expect(response.title).to.eql(pm.collectionVariables.get(\"taskTitle\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1bdd2fe2-ca87-4a8a-b121-81250add47d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"text\": \"{{$randomLoremSentence}}\",\r\n  \"answer\": \"{{$randomLoremSentence}}\",\r\n  \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46dc5abc-d4bb-4133-b1f3-362559390abe",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"TaskId found\", function () {\r",
											"    \r",
											"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"taskId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Task text, answer, title are correct\", function () {\r",
											"    pm.expect(response.text).to.eql(pm.collectionVariables.get(\"taskText\"));\r",
											"    pm.expect(response.answer).to.eql(pm.collectionVariables.get(\"taskAnswer\"));\r",
											"    pm.expect(response.title).to.eql(pm.collectionVariables.get(\"taskTitle\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a1d9c81a-9e29-493c-a746-65b80951d182",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"id": "1f15e52b-390d-410f-9b1d-37d6fae7a019",
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d36aa637-af97-4340-ba25-c79dd491cac8",
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"let updatedText = pm.collectionVariables.get(\"taskText\") + \"_updated\";\r",
											"let updatedAnswer = pm.collectionVariables.get(\"taskAnswer\") + \"_updated\";\r",
											"let updatedTitle = pm.collectionVariables.get(\"taskTitle\") + \"_updated\";\r",
											"\r",
											"pm.test(\"Task has been updated\", function () {\r",
											"    pm.expect(response.text).to.eql(updatedText);\r",
											"    pm.expect(response.answer).to.eql(updatedAnswer);\r",
											"    pm.expect(response.title).to.eql(updatedTitle);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3cf6cd87-8c4a-4510-951f-06552c30a64c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{taskText}}_updated\",\r\n  \"answer\": \"{{taskAnswer}}_updated\",\r\n  \"title\": \"{{taskTitle}}_updated\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"id": "6688a1e5-3b62-4d5e-a805-2d254858e6f2",
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update task partially",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f149499-3300-49da-ae2f-0d60e2b34ee8",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"var newText = pm.collectionVariables.get(\"taskText\") + \"_new\";\r",
											"var newAnswer = pm.collectionVariables.get(\"taskAnswer\") + \"_new\";\r",
											"var updatedTitle = pm.collectionVariables.get(\"taskTitle\") + \"_updated\";\r",
											"\r",
											"pm.test(\"Task has been updated partially\", function () {\r",
											"    pm.expect(response.text).to.eql(newText);\r",
											"    pm.expect(response.answer).to.eql(newAnswer);\r",
											"    pm.expect(response.title).to.eql(updatedTitle);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "84dea7f0-81c8-4e10-acf8-c2cb25cf2b4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{taskText}}_new\",\r\n  \"answer\": \"{{taskAnswer}}_new\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"id": "54d228e9-f373-4171-aa5b-963f36d18596",
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tasks list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "398c7040-4f5c-48a0-9b01-5bffb44af6ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Last task is in the list\", function () {\r",
											"    pm.expect(response[0].id).to.eql(pm.collectionVariables.get(\"taskId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "07d7a73f-e61d-4532-ac5a-06dbc7f9a939",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4a1913c-3d78-4fb3-b34e-615064cba942",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fec516f8-5c1c-4de7-ad67-13b82eb14ec8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"id": "e5615179-b44f-4bb2-bd9d-49582543f4d2",
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46dc5abc-d4bb-4133-b1f3-362559390abe",
										"exec": [
											"pm.test(\"Status code is 404, task has been deleted.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset('taskId');\r",
											"pm.collectionVariables.unset('taskText');\r",
											"pm.collectionVariables.unset('taskTitle');\r",
											"pm.collectionVariables.unset('taskAnswer');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6f16ed09-20fd-41e4-bf4a-cc3878bec469",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"id": "b8d63c18-df00-4971-8a29-af3f48094af4",
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "969919fe-660b-4726-b39d-bef726566cb8"
				},
				{
					"name": "Sad path",
					"item": [
						{
							"name": "Create task  - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1d7da8cd-d2ca-43ce-97a3-abd5ca626d0d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "09236a8c-4656-43d5-b9c9-104873bd3c59",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "59490f06-220f-4ce6-b4f9-0581851621f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "90dd49db-bf7a-48d0-b8ce-c6d741a71958",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "20fded49-f63f-4488-b6ec-7116c2dbcc1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - invalid http method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 501\", function () {\r",
											"    pm.response.to.have.status(501);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb6ffc8c-ff4c-4f7a-8f97-dbe0351c4a71",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "HEAD",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "807ac623-d3f0-47fb-8b67-288dc05a7315"
				},
				{
					"name": "Create task - field validation",
					"item": [
						{
							"name": "Create task - empty text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7bcbcd9-e872-4d9b-a0e7-b07730997d3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\",\r\n    \"answer\": \"{{$randomLoremWords}}\",\r\n    \"title\": \"{{$randomLoremWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - empty answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a7c22fe-2ab4-40d3-a678-51f3938b8598",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomLoremWords}}\",\r\n    \"answer\": \"\",\r\n    \"title\": \"{{$randomLoremWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - empty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd81b4da-fe6b-41c1-a1c5-744955d9a84b",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7dc32373-bbe6-4b8a-82f7-96760e5c1f5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomLoremWords}}\",\r\n    \"answer\": \"{{$randomLoremWords}}\",\r\n    \"title\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "3a38df76-4038-4fc0-971e-20c52e0b7936"
				}
			],
			"id": "a9a34488-668c-43f5-a535-8443f8fd4b33"
		}
	]
}