{
	"info": {
		"_postman_id": "b14ab8bb-7489-4fff-9f67-e62da416c128",
		"name": "sqlverifier_auto_4.1_4.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-b14ab8bb-7489-4fff-9f67-e62da416c128"
	},
	"item": [
		{
			"name": "Register/login",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c458672d-15be-4c81-9189-88b9c8b53abf",
										"exec": [
											"let jsonBody = JSON.parse(pm.request.body)\r",
											"\r",
											"pm.environment.set(\"newUsername\", jsonBody.login);\r",
											"pm.environment.set(\"newPassword\", jsonBody.password);\r",
											"pm.environment.set(\"newEmail\", jsonBody.email);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a0e7d3e-c9b8-4860-a0c6-459919f0bac4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93439693-ee42-44e4-929e-cba8041257bc",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a822876-6bc3-4159-af5f-7e0f71757107",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c972b809-cfd9-4fa2-a023-e06fc15e14e3",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"adminToken\", jsonBody.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5901e64e-fae6-4e13-9cf9-de7d37703d80",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{adminUsername}}\",\r\n  \"password\": \"{{adminPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's account info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd71dba3-9976-4fe3-91d9-3338a93ddea4",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"user_id\", jsonBody.id);\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(false);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "621c4f2a-2a0a-47e1-a1b9-b2b4e743d431",
										"exec": [
											"let originalUsername = pm.environment.get(\"newUsername\")\r",
											"let originalEmail= pm.environment.get(\"newEmail\")\r",
											"\r",
											"\r",
											"let usernameLowerCase = originalUsername.toLowerCase()\r",
											"let emailLowerCase = originalEmail.toLowerCase()\r",
											"\r",
											"\r",
											"pm.environment.set(\"usernameLowerCase\", usernameLowerCase)\r",
											"pm.environment.set(\"emailLowerCase\", emailLowerCase)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "340ed670-7ec9-476c-b7d6-9aa8f3da4888",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"login\": \"{{usernameLowerCase}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7354a427-33a6-4008-a6ff-373521c50340",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d4c498a-f38d-4a93-b56e-625420a03e72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{user_id}},\r\n    \"login\": \"{{newUsername}}\",\r\n    \"activated\": true,\r\n    \"authorities\": [\r\n        \"ROLE_USER_STUDENT\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d33fa091-d2f9-4483-9758-a2e21cec10b1",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"pm.environment.set(\"userToken\", jsonBody.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "148c501a-3f29-4619-ac0d-dee5cc561826",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get logged in new user's account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1402e05-a10e-486c-8629-3ed1ddaceffc",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"User's id, login, email, activated status are correct\", function () {\r",
											"        pm.expect(jsonBody.id).to.equal(pm.environment.get(\"user_id\"));\r",
											"    pm.expect(jsonBody.login).to.equal(pm.environment.get(\"usernameLowerCase\"));\r",
											"    pm.expect(jsonBody.email).to.equal(pm.environment.get(\"emailLowerCase\"));\r",
											"    pm.expect(jsonBody.activated).to.equal(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fffee0d5-de43-4dff-a797-edc7d2ba0389",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e9ab5e5-f990-4388-a6ad-28ccd2c61aff",
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a76f4f72-ce2b-44dc-aaae-ae3fb4836900",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NTA3ODE3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzQyMTQxN30.UZ8J5F-FaIHRyA-73M2IEg4xcy2xRVSlrZsdLRwHL__MroZAb0-6BFwt0lts90yojh7A6XxNsuxpLYC8XF-pMw"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's account info  after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06f02e70-e130-4d10-b962-905629df23d0",
										"exec": [
											"let jsonBody = JSON.parse(responseBody)\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b3290bb7-afe1-4898-8c3a-1d16e8b66bca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"login\": \"{{newUsername}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{usernameLowerCase}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{usernameLowerCase}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as new user after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48371c61-1b4f-454d-aada-a0aa037a2426",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.unset('newPassword')\r",
											"pm.environment.unset('newUsername')\r",
											"pm.environment.unset('adminToken')\r",
											"pm.environment.unset('userToken')\r",
											"pm.environment.unset('user_id')\r",
											"pm.environment.unset('usernameLowerCase')\r",
											"pm.environment.unset('newEmail')\r",
											"pm.environment.unset('emailLowerCase')\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "45a78ee2-6a66-478e-bad8-28af636977d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"id": "90b730fd-5a7a-42e4-9d9f-621ca265e499"
				},
				{
					"name": "Sad path",
					"item": [
						{
							"name": "Register new user - empty username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "396b55a6-13d5-4469-9d95-00f5a47baa1f",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6adcb43a-2eda-4e7a-b95e-7b04cdd003dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register new user - empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee066058-3fad-48b9-baaf-ead041ef21b5",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b4776dd6-cf2d-4366-b5ad-7adeeaf97633",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register new user - empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b2d76bd-a3ed-4ce9-b33e-4636a024575e",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d372b38d-fc2a-44c1-8e76-c2a4f78eefc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"{{$randomFirstName}}_auto\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"langKey\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate with invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e4c2c8b-bc9e-4e3d-a02e-d6dea4246643",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ca8d0ca-a2dd-4dac-9e0d-f8f3569767d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{invalidUsername}}\",\r\n  \"password\": \"{{invalidPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - no password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc189395-b03d-4d0c-bfe4-a2272729d07b",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cefa27ca-2567-4bd6-863c-d5bcebf4db01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{newUsername}}\",\r\n  \"password\": \"\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate  - no username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93bbfdab-9bbf-4038-9240-bf3af1818b30",
										"exec": [
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status field is a non-negative integer\", function () {\r",
											"    pm.expect(responseData.status).to.be.a('number');\r",
											"    pm.expect(responseData.status).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7748dc6b-7c7b-41dc-943a-d79ee6fccca4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"{{newPassword}}\",\r\n  \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin's account  - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60aafa47-763c-4e82-8981-282b23befb4b",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8979a664-dae8-4369-ac3d-069affbe9d75",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6c9542e2-8eff-4650-9391-4b2264976702",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{adminUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUsername}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin's account  - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c29eace7-8033-439b-8453-d02fae2d98fa",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d82c937-e756-44c6-ac2d-70aea8757a35",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "76bcfd6f-0891-4be4-bff0-b79bc805a2d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/{{adminUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUsername}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "84bdd570-bff4-4803-80cd-679ae8d1b952"
				}
			],
			"id": "2a21f9c0-1592-49b4-8337-c6ebe00a99f1"
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Login as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd12f653-dd8d-48e5-8004-19fbf41c5499",
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"adminToken\", response.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token provided\", function () {\r",
											"    \r",
											"    pm.expect(response.id_token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "260f52e2-1c99-4eea-8ca5-2c28866b4822",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Authorization",
										"value": "{{adminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{adminUsername}}\",\r\n    \"password\": \"{{adminPassword}}\",\r\n    \"rememberMe\": false\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d756eac-8e1b-4c97-909d-d820f9079f64",
										"exec": [
											"let response = pm.response.json()\r",
											"pm.collectionVariables.set(\"taskId\", response.id);\r",
											"pm.collectionVariables.set(\"taskText\", response.text);\r",
											"pm.collectionVariables.set(\"taskAnswer\", response.answer);\r",
											"pm.collectionVariables.set(\"taskTitle\", response.title);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Task id provided\", function () {\r",
											"   pm.expect(response.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Task text, answer, title are correct\", function () {\r",
											"    pm.expect(response.text).to.eql(pm.collectionVariables.get(\"taskText\"));\r",
											"    pm.expect(response.answer).to.eql(pm.collectionVariables.get(\"taskAnswer\"));\r",
											"    pm.expect(response.title).to.eql(pm.collectionVariables.get(\"taskTitle\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c51cc648-4382-4b1a-b1ce-39835ce9dc8a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"text\": \"{{$randomLoremSentence}}\",\r\n  \"answer\": \"{{$randomLoremSentence}}\",\r\n  \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ba89863-2c29-41b3-bc3c-980a849cf1ec",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"TaskId found\", function () {\r",
											"    \r",
											"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"taskId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Task text, answer, title are correct\", function () {\r",
											"    pm.expect(response.text).to.eql(pm.collectionVariables.get(\"taskText\"));\r",
											"    pm.expect(response.answer).to.eql(pm.collectionVariables.get(\"taskAnswer\"));\r",
											"    pm.expect(response.title).to.eql(pm.collectionVariables.get(\"taskTitle\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2fa1681c-5aba-46b0-9696-2c7f61d9c3f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db305505-a04f-465c-a0e3-86bfbebac39b",
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"let updatedText = pm.collectionVariables.get(\"taskText\") + \"_updated\";\r",
											"let updatedAnswer = pm.collectionVariables.get(\"taskAnswer\") + \"_updated\";\r",
											"let updatedTitle = pm.collectionVariables.get(\"taskTitle\") + \"_updated\";\r",
											"\r",
											"pm.test(\"Task has been updated\", function () {\r",
											"    pm.expect(response.text).to.eql(updatedText);\r",
											"    pm.expect(response.answer).to.eql(updatedAnswer);\r",
											"    pm.expect(response.title).to.eql(updatedTitle);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "09dc62ba-a27e-46d9-83ea-7270ec452daa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{taskText}}_updated\",\r\n  \"answer\": \"{{taskAnswer}}_updated\",\r\n  \"title\": \"{{taskTitle}}_updated\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update task partially",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3080f3f-148d-4892-9cf4-9840835003b3",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"var newText = pm.collectionVariables.get(\"taskText\") + \"_new\";\r",
											"var newAnswer = pm.collectionVariables.get(\"taskAnswer\") + \"_new\";\r",
											"var updatedTitle = pm.collectionVariables.get(\"taskTitle\") + \"_updated\";\r",
											"\r",
											"pm.test(\"Task has been updated partially\", function () {\r",
											"    pm.expect(response.text).to.eql(newText);\r",
											"    pm.expect(response.answer).to.eql(newAnswer);\r",
											"    pm.expect(response.title).to.eql(updatedTitle);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5161d049-bd29-49d5-903e-b1f6ae089cdf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{taskText}}_new\",\r\n  \"answer\": \"{{taskAnswer}}_new\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tasks list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b4427c6-0408-4bf4-9c05-39d0455366c8",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Last task is in the list\", function () {\r",
											"    pm.expect(response[0].id).to.eql(pm.collectionVariables.get(\"taskId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d63853d9-0513-4b08-86d2-e0b5964ae521",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8efb7e7-85fa-48a3-aa90-603fce8d0160",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fffd0e9e-8950-43e5-8ffa-beb9b25c10d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get task after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e08976b6-edd0-4d31-802f-06964af96e4e",
										"exec": [
											"pm.test(\"Status code is 404, task has been deleted.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset('taskId');\r",
											"pm.collectionVariables.unset('taskText');\r",
											"pm.collectionVariables.unset('taskTitle');\r",
											"pm.collectionVariables.unset('taskAnswer');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b0633d8-a37f-4f20-97c1-b542edbb12dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "d7fa9dfe-f1f5-4e45-9460-f057e61b5265"
				},
				{
					"name": "Sad path",
					"item": [
						{
							"name": "Create task  - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69da9e94-d30b-4329-9e95-19b6bd7cbe58",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "38186a8d-6d24-4f89-8e47-0337cd349ef1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1785deb-ffad-4c54-8b86-0b62f351b478",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2f2023b8-bd1d-453b-ad27-9624fc5916cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7862950d-0f12-40fd-b76d-19afc098ab46",
										"exec": [
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6f654abf-2562-4e98-b240-89c03c45f3d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb3b4104-af98-4d7c-aef6-b184400eebf7",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f74379f1-86de-4d85-b349-da308322ca6b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - no title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb05fea5-d6b9-464e-9b0c-a658fac25397",
										"exec": [
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Json response contains some message\", function () {\r",
											"    let jsonBody = pm.response.json();\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7a41e01-f51a-4518-8879-f87770407597",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - invalid http method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ec835d5-ec05-401c-bb2b-8978235fdfad",
										"exec": [
											"\r",
											"pm.test(\"Status code is 501\", function () {\r",
											"    pm.response.to.have.status(501);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c3525fcc-c916-4151-acfe-6ebed6b38695",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "HEAD",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"text\": \"{{$randomFirstName}}\",\r\n    \"answer\": \"{{$randomLastName}}\",\r\n    \"title\": \"task{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "9a317ff2-fa0e-44c0-936a-007db13ad8ec"
				},
				{
					"name": "Create task - field validation",
					"item": [
						{
							"name": "Create task - empty text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cfe433e-d3a3-4f6e-aeb0-a01c6c6d26cd",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3586b19b-ac3a-465d-a955-557e6f16506d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\",\r\n    \"answer\": \"{{$randomLoremWords}}\",\r\n    \"title\": \"{{$randomLoremWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - empty answer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01330d35-2000-4548-96df-418cf76e7806",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "db1b1d0b-9f45-4930-acdc-e4fda8424659",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomLoremWords}}\",\r\n    \"answer\": \"\",\r\n    \"title\": \"{{$randomLoremWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create task  - empty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df87e9a1-c23e-40ae-9e51-75b2572962e6",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83e890a1-afea-433a-b539-679c740dfc3d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomLoremWords}}\",\r\n    \"answer\": \"{{$randomLoremWords}}\",\r\n    \"title\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "91a09d8c-e8c1-484b-8733-99c39bf9a81d"
				},
				{
					"name": "Create task - iterations",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f1d3471-6303-48ae-b771-777ad22874ed",
										"exec": [
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var expectedResponseCode = pm.iterationData.get(\"responseCode\");\r",
											"// var expectedResponseMessage = pm.iterationData.get(\"responseMessage\");\r",
											"\r",
											"pm.test(\"Correct status code\", function () {\r",
											"    pm.response.to.have.status(expectedResponseCode);\r",
											"});\r",
											"\r",
											"// pm.test(\"Body matches string\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(expectedResponseMessage);\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe304ca4-976e-4f3a-9cee-f4ed31d7bd10",
										"exec": [
											"console.log(\"Logging in as admin\");\r",
											"\r",
											"// Define the URL\r",
											"\r",
											"let baseUrl = pm.environment.get(\"baseUrl\")\r",
											"\r",
											"const url = baseUrl + '/api/authenticate';\r",
											"const urlLogin = baseUrl + 'login';\r",
											"const adminUsername = pm.environment.get(\"adminUsername\")\r",
											"const adminPassword = pm.environment.get(\"adminPassword\")\r",
											"\r",
											"\r",
											"// Define the request payload\r",
											"const payload = {\r",
											"    username: adminUsername,\r",
											"    password: adminPassword,\r",
											"    rememberMe: false\r",
											"};\r",
											"\r",
											"// Define the request options\r",
											"const options = {\r",
											"    url: url,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Accept\": \"application/json, text/plain, */*\",\r",
											"    \"Accept-Language\": \"en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7\",\r",
											"    \"Connection\": \"keep-alive\",\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Origin\": url,\r",
											"    \"Referer\": urlLogin,\r",
											"    \"Sec-Fetch-Dest\": \"empty\",\r",
											"    \"Sec-Fetch-Mode\": \"cors\",\r",
											"    \"Sec-Fetch-Site\": \"same-origin\",\r",
											"    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\",\r",
											"    \"sec-ch-ua\": \"\\\"Google Chrome\\\";v=\\\"119\\\", \\\"Chromium\\\";v=\\\"119\\\", \\\"Not?A_Brand\\\";v=\\\"24\\\"\",\r",
											"    \"sec-ch-ua-mobile\": \"?0\",\r",
											"    \"sec-ch-ua-platform\": \"\\\"Windows\\\"\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(payload)\r",
											"    }\r",
											"};\r",
											"\r",
											"\r",
											"// Make the POST request\r",
											"pm.sendRequest(options, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error:\", err);\r",
											"    } else {\r",
											"        try {\r",
											"            // Check if the response body is not empty\r",
											"            if (response.text()) {\r",
											"                var jsonBody = response.json();\r",
											"                console.log(\"Response:\", jsonBody);\r",
											"                // Assuming there is an 'id_token' property in the response\r",
											"                pm.environment.set(\"adminToken\", jsonBody.id_token);\r",
											"            } else {\r",
											"                console.error(\"Response body is empty\");\r",
											"            }\r",
											"        } catch (jsonError) {\r",
											"            console.error(\"Error parsing JSON:\", jsonError);\r",
											"            console.log(\"Response body:\", response.text());\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c031f673-131d-4a2a-a79b-cd88cb8c1628",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMTE4NzAxNSwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDExMDA2MTV9.AeOYPEXfnT_YiduWe9DixeaPSz2tF0iw8gYMtZuMVmqZHWLb1XLAyyc2mLH4dqNMoFOi8ZR04VZefO7eJ5VhWA",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"text\": \"{{taskText}}\",\r\n  \"answer\": \"{{taskAnswer}}\",\r\n  \"title\": \"{{taskTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "a27af82a-6543-47d1-9744-246b6810171b"
				}
			],
			"id": "84c2fadc-c165-4cd1-b1d7-d80b42b0c913"
		}
	]
}